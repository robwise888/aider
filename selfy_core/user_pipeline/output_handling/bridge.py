"""
Output Handler Bridge for Selfy.

This module provides a bridge to the output handling implementation.
It imports and re-exports the OutputProcessor from the output_handling module.
"""

import logging
from typing import Dict, Any, Optional, List

# Set up logger
try:
    from selfy_core.global_modules.logging import get_logger
    logger = get_logger(__name__)
except ImportError:
    # Fall back to standard logging
    import logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

# Define a mock IdentityFilter for testing
class MockIdentityFilter:
    """Mock identity filter for testing."""
    def filter_output(self, text, context_type=None):
        """Filter output text."""
        class MockResult:
            status = 'allowed'
            output_text = text
            reason = None
        return MockResult()

# Try to import from output_handling implementation
try:
    from selfy_core.user_pipeline.output_handling.processor import OutputProcessor
    logger.info("Using production output_handling implementation")
except ImportError:
    # Fall back to a mock implementation
    logger.warning("Could not import OutputProcessor, using mock implementation")
    
    class OutputProcessor:
        """
        Mock implementation of the OutputProcessor.
        
        This is used as a fallback when the real implementation is not available.
        """
        
        def __init__(self, identity_filter=None):
            """
            Initialize the mock output processor.
            
            Args:
                identity_filter: The identity filter to use
            """
            self.identity_filter = identity_filter or MockIdentityFilter()
            logger.info("Initialized mock OutputProcessor")
        
        def process_output(self,
                         response_text: str,
                         requested_format: Optional[str] = None,
                         context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
            """
            Process output for delivery to the user.
            
            Args:
                response_text: The candidate response text generated by the Context Engine
                requested_format: Desired output format ('text', 'markdown', 'json')
                context: Additional context potentially needed for validation or formatting
                
            Returns:
                An OutputResult object containing the outcome
            """
            logger.info(f"Processing output: {response_text[:100]}...")
            
            # Apply identity filter
            if self.identity_filter:
                filter_result = self.identity_filter.filter_output(response_text, context)
                if filter_result.status != 'allowed':
                    logger.warning(f"Output filtered: {filter_result.reason}")
                    response_text = filter_result.output_text
            
            # Create a minimal result
            from dataclasses import dataclass
            
            @dataclass
            class OutputResult:
                status: str
                formatted_output: str
                original_output: str
                format_used: str
                metadata: Dict[str, Any]
            
            return OutputResult(
                status='success',
                formatted_output=response_text,
                original_output=response_text,
                format_used=requested_format or 'text',
                metadata={}
            )

# Export the OutputProcessor
__all__ = ["OutputProcessor"]
