"""
Output Processor for the Output Handling module.

This module provides the OutputProcessor class, which is responsible for
processing output before delivery to the user.
"""

import time
from typing import Dict, List, Any, Optional

from selfy_core.global_modules.config import get as config_get
from selfy_core.global_modules.logging import get_logger
from selfy_core.user_pipeline.output_handling.validator import OutputValidator
from selfy_core.user_pipeline.output_handling.formatter import OutputFormatter
from selfy_core.user_pipeline.output_handling.data_structures import (
    OutputResult, ValidationResult, OutputValidationError
)

# Set up logger
logger = get_logger(__name__)


class OutputProcessor:
    """
    Processes output before delivery to the user.
    
    The OutputProcessor is responsible for:
    1. Applying identity filtering
    2. Validating output
    3. Formatting output
    """
    
    def __init__(self, identity_filter=None):
        """
        Initialize the output processor.
        
        Args:
            identity_filter: An instance of the initialized IdentityFilter
        """
        # Store the identity filter
        self.identity_filter = identity_filter
        
        # Create validator and formatter
        self.validator = OutputValidator()
        self.formatter = OutputFormatter()
        
        logger.info("OutputProcessor initialized")
    
    def process_output(self, 
                      response_text: str, 
                      requested_format: Optional[str] = None,
                      context: Optional[Dict[str, Any]] = None) -> OutputResult:
        """
        Process output for delivery to the user.
        
        Args:
            response_text: The candidate response text generated by the Context Engine
            requested_format: Desired output format ('text', 'markdown', 'json')
            context: Additional context potentially needed for validation or formatting
            
        Returns:
            An OutputResult object containing the outcome
            
        Raises:
            OutputValidationError: If validation fails critically
        """
        start_time = time.time()
        logger.info(f"Processing output: {response_text[:100]}...")
        
        # Prepare context
        if context is None:
            context = {}
        
        try:
            # Step 1: Apply identity filter
            if self.identity_filter:
                identity_filter_result = self.identity_filter.filter_output(response_text)
                filtered_text = identity_filter_result.output_text
                identity_filter_status = identity_filter_result.status
            else:
                filtered_text = response_text
                identity_filter_status = 'allowed'
            
            # Step 2: Validate output
            validation_result = self.validator.validate(filtered_text)
            
            # Handle validation result
            if validation_result.status == 'invalid' and validation_result.sanitized_output is None:
                # Critical validation failure with no sanitized output
                logger.error(f"Output validation failed critically: {', '.join(validation_result.issues)}")
                raise OutputValidationError(f"Output validation failed: {', '.join(validation_result.issues)}")
            
            # Use sanitized output if available
            filtered_output = validation_result.sanitized_output or filtered_text
            
            # Step 3: Format output
            format_to_use = requested_format or config_get('pipeline.output_handling.formatting.default_format', 'text')
            formatted_output = self.formatter.format(filtered_output, format_to_use)
            
            # Create result
            result = OutputResult(
                status='success' if validation_result.status == 'valid' else 'warning',
                formatted_output=formatted_output,
                original_response=response_text,
                identity_filter_status=identity_filter_status,
                validation_status=validation_result.status,
                format_used=format_to_use,
                error_message=', '.join(validation_result.issues) if validation_result.issues else None
            )
            
            logger.info(f"Output processed in {time.time() - start_time:.4f} seconds")
            return result
        except Exception as e:
            logger.error(f"Error processing output: {e}", exc_info=True)
            
            # Create error result
            result = OutputResult(
                status='error',
                formatted_output=None,
                original_response=response_text,
                identity_filter_status='error',
                validation_status='error',
                format_used='text',
                error_message=str(e)
            )
            
            logger.info(f"Output processing failed in {time.time() - start_time:.4f} seconds")
            return result


# Global instance
_output_processor_instance = None


def setup_output_processor(identity_filter=None) -> bool:
    """
    Set up the output processor.
    
    Args:
        identity_filter: An instance of the initialized IdentityFilter
        
    Returns:
        True if setup was successful, False otherwise
    """
    global _output_processor_instance
    
    try:
        _output_processor_instance = OutputProcessor(identity_filter)
        logger.info("Output processor set up successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to set up output processor: {e}")
        return False


def get_output_processor() -> Optional[OutputProcessor]:
    """
    Get the output processor instance.
    
    Returns:
        The output processor instance, or None if not set up
    """
    global _output_processor_instance
    
    if _output_processor_instance is None:
        logger.warning("Output processor not initialized")
    
    return _output_processor_instance
